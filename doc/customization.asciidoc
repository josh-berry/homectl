How to Customize homectl
========================
:toc:

Introduction
------------

So you've installed homectl according to the README instructions, now what?  How
do you apply it to your specific setup?  Moreover, how do you do it with a
minimum of fuss?  This document attempts to answer that question.

Before we begin, you should know a few important things:

  . Everything you keep in homectl lives in a *package*, without exception.
  . Typically, packages live in your *setup*.

You use the +hc+ command only to *enable* and *disable* packages.  The packages
themselves provide functionality (e.g. the +hc+ command itself), store your
preferences and configuration files, or both.

Splitting Your Stuff Up
~~~~~~~~~~~~~~~~~~~~~~~

You probably already have a huge mass of scripts, configuration files, and so
on.  When you split it into packages, think about splitting in the following
ways:

  * What it does (e.g. emacs vs. screen vs. ssh-agent vs. ...).
  * What platform or environment it runs on (e.g. Darwin vs. Linux).
  * What hat you're wearing (e.g. work, personal, charity).
  * How often you use it (keep rarely-used things out of your environment).

For instance, the author has the following packages (at the moment):

.The Author's homectl Packages
================================================================================
dev.hcpkg::
    Scripts and customizations for software development.

emacs-ux.hcpkg::
    Themes, usability customizations and other enhancements for Emacs.

editor.hcpkg::
    Script for finding and starting an editor, depending on what environment
    he's working in (GUI, text, ...).

fs.hcpkg::
    Various scripts for working with lots of files (renaming, moving, etc.)

mail.hcpkg::
    Various scripts for processing and archiving e-mail.

music.hcpkg::
    Scripts for manipulating the author's music collection.

oh-my-zsh.hcpkg::
    A set of extensions to zsh maintained by robbyrussell, plus configuration.

root.hcpkg::
    Scripts needed only by the root user (e.g. backup scripts).

screen.hcpkg::
    .screenrc

ssh-agent.hcpkg::
    Ensures an ssh-agent is available in the author's shell.

work.hcpkg::
    Scripts and configuration files relevant only to the author's employment.

zsh.hcpkg::
    Shell customizations (on top of oh-my-zsh).
================================================================================

Loader Packages
---------------

Some packages (called *loader packages*) exist only to provide a way for other
packages to insert their functionality into your environment.  For example,
homectl comes with the +loader-bash.hcpkg+ package.  +loader-bash.hcpkg+
replaces your existing +.bashrc+ and +.bash_profile+ with scripts that do
nothing but load +bash+ customizations from all the other enabled homectl
packages.

There is nothing intrinsically special or different about a loader package.
Typically they have names starting with +loader-+, and several default loaders
are provided with homectl for your convenience.  With few exceptions, loaders
are generally responsible for both enforcing and following the conventions in
this document.

homectl includes several loader packages by default, to help get you started and
to ease the task of breaking up your configuration into packages.  You should
choose the ones that apply to you and enable them with:

--------------------------------------------------------------------------------
$ hc enable homectl/loader-foo.hcpkg
--------------------------------------------------------------------------------

+loader-bash.hcpkg+ and +loader-zsh.hcpkg+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The +loader-bash.hcpkg+ and +loader-zsh.hcpkg+ loaders replace your shell's
profile and rc-files.  They are responsible for loading all the shell
customizations (environment variables, functions, shell scripts, snazzy prompts,
etc.) you have in all your enabled homectl packages.

The simplest way to customize your shell is to create +shell-env/*.sh+ or
+shell-rc/*.sh+ files in your homectl package, and place your code in there.
You can also create a +bin/+ directory, to hold your stand-alone scripts, or
even custom binaries.

As the name implies, +shell-env/*+ files are generally expected to contain
environment variable or other settings that could apply to both interactive and
non-interactive shells.  They should not produce any output, nor expect any
input.  They may be run even as part of shell scripts, so it's best to keep them
as small as possible.

+shell-rc/*+, on the other hand, contain things one might use while sitting at a
shell prompt.  This would be a good place to change your prompt, set up an
+ssh-agent+, or add shell aliases.

If the loader sees a +bin/+ directory inside your package, that directory will
be automatically added to your PATH.  Similarly, +lib/+, +lib64/+, etc. are
added to your linker path.  This helps you to package 3rd-party programs for use
in homectl with a minimum of fuss.

+loader-emacs.hcpkg+
~~~~~~~~~~~~~~~~~~~~

The Emacs loader replaces your +~/.emacs+ file with a script that loads Emacs
packages and customizations from your enabled homectl packages.  It also
provides a convenient way to download and install +package.el+ packages from
third-party sources.

You can customize your Emacs by writing small a Emacs package (just a +foo.el+
file with +(provide 'foo)+ at the end) and placing it in the +emacs-startup/+
subdirectory of your homectl package.



Creating Your Own Package
-------------------------

Now that you've enabled all the loader packages you'll need, you should create a
couple homectl packages to hold your customizations.  To make a homectl package,
all you need to do is:

--------------------------------------------------------------------------------
$ mkdir my-stuff.hcpkg
--------------------------------------------------------------------------------

You can immediately enable it, like so:

--------------------------------------------------------------------------------
$ hc enable my-stuff.hcpkg
update /home/me/.homectl/enabled-pkgs
--------------------------------------------------------------------------------

homectl records the package as enabled, but nothing else happens because the
package has nothing in it.  You'll need to place some specially-named files and
directories inside your package to make it do something useful.

Try creating a +bin/+ directory inside your package, and placing a script there.
When you create, move, or delete files inside your package, you'll have to
inform homectl of the change:

--------------------------------------------------------------------------------
$ hc refresh       # or just "hc ref" for short
ln -s ../../../home-setup/my-stuff.hcpkg/bin/script /home/me/.homectl/common/bin/script
--------------------------------------------------------------------------------

Notice that homectl maintains a set of symlinks to the files in each enabled
package in +~/.homectl+.  The +hc refresh+ command causes homectl to re-scan
these packages, and update the symlinks accordingly.



Anatomy of a Package
--------------------

The contents of a homectl package are broken down by *system* and by *hook*.

A *system* is a particular environment, such as a machine with a particular
hostname, a particular OS, or a particular OS/CPU-architecture combination.
Except for the default +common+ system, which is always available no matter what
machine you're on, system names begin with an upper-case letter.

A *hook* is an extension point.  Hooks are typically given well-known names,
such as +bin+, +lib+ or +emacs+.  Hook names always begin with a lower-case
letter.

All files in a homectl package belong to a particular system and hook.
Except for the special +common+ system, all files live in a directory hierarchy
inside the package which follows the pattern:

--------------------------------------------------------------------------------
example.hcpkg/$System/$hook/my-file.txt
--------------------------------------------------------------------------------

Files in the +common+ system can omit the +$System+ directory entirely:

--------------------------------------------------------------------------------
example.hcpkg/$hook/my-file.txt   # this file is in the "common" system
--------------------------------------------------------------------------------

.Layout of an example homectl package
================================================================================
--------------------------------------------------------------------------------
example.hcpkg/
  bin/            <--- hook (in the "common" system)
    my-script

  emacs-startup/
    my-settings.el

  Linux/          <--- system
    bin/          <--- system-specific hook
      my-binary
    lib/
      libfoo.so
    ...

  [A-Z].*/        <--- this is what a system name looks like
    [a-z].*/      <--- this is what a hook name looks like
      ...
--------------------------------------------------------------------------------
================================================================================

Linking into +~/.homectl+
~~~~~~~~~~~~~~~~~~~~~~~~~

When a package is enabled, homectl symlinks the contents of each package into
+\~/.homectl+, following the pattern: +\~/.homectl/$SYSTEM/$HOOK+.  From the
example above, if you were to create a script +example.hcpkg/bin/my-script+,
homectl would create the following link in +~/.homectl+:

--------------------------------------------------------------------------------
~/.homectl/common/bin/my-script -> path/to/example.hcpkg/bin/my-script
--------------------------------------------------------------------------------

Note that unlike in the package, the +common+ system is explicit here; this is
so homectl can place its configuration files directly under +~/.homectl+
without fear of name clashes.

Similarly, if you were to place a file under a system-specific hook, you would
see a symlink like so:

--------------------------------------------------------------------------------
~/.homectl/Linux/bin/my-binary -> path/to/example.hcpkg/Linux/bin/my-binary
--------------------------------------------------------------------------------

Symlinks created by homectl are always relative.  This is done to accommodate a
user whose home directory may be in different locations on different systems.

You may also place files in subdirectories inside a hook.  Those files will be
individually linked into +~/.homectl+.  This allows you to build entire trees
with files pulled from different packages.  For example, a binary package may
place manpages under +share/man/manX+:

--------------------------------------------------------------------------------
$ hc enable my-stuff.hcpkg
update /home/me/.homectl/enabled-pkgs
mkdir -p /home/me/.homectl/common/share/man/man1
ln -s ../../../home-setup/my-stuff.hcpkg/share/man/man1/foo.1 /home/me/.homectl/common/share/man/man1/foo.1
ln -s ../../../home-setup/my-stuff.hcpkg/share/man/man1/bar.1 /home/me/.homectl/common/share/man/man1/bar.1
--------------------------------------------------------------------------------

The special +overlay+ hook
~~~~~~~~~~~~~~~~~~~~~~~~~~

The special +overlay+ hook contains files that will be linked directly into your
home directory when you enable the package.  Typically, you would place
dot-files here (e.g. +.vimrc+, +.screenrc+, etc.).

The +overlay+ hook is only special in the +common+ system -- that is,
system-specific overlay hooks will not be linked into your home directory.

.Placing a .screenrc into a homectl Package
================================================================================
--------------------------------------------------------------------------------
$ mkdir screen.hcpkg
$ mkdir screen.hcpkg/overlay
$ touch screen.hcpkg/overlay/.screenrc

$ hc enable screen.hcpkg
...
ln -s ../../../home-setup/screen.hcpkg/overlay/.screenrc /home/me/.screenrc
...
--------------------------------------------------------------------------------

If you place a +.screenrc+ into the overlay, +hc enable+ will link it into your
home directory automatically.
================================================================================

As with subdirectories inside other hooks, only individual files are linked into
your home directory; if you create a directory inside +overlay/+, a separate
directory will be created in +~+, and the files inside the overlay will be
linked into that directory.

.Subdirectories in the Overlay
================================================================================
--------------------------------------------------------------------------------
$ mkdir unison.hcpkg
$ mkdir unison.hcpkg/overlay
$ mkdir unison.hcpkg/overlay/.unison
$ touch unison.hcpkg/overlay/.unison/default.prf

$ hc enable unison.hcpkg
...
mkdir -p /home/me/.unison
ln -s ../home-setup/unison.hcpkg/overlay/.unison/default.prf /home/me/.unison/default.prf
...
--------------------------------------------------------------------------------

homectl will create the directory if it doesn't already exist, and place a
symlink in that directory.  One interesting thing to note is that symlinks
created by homectl are always relative.  Here, we can see that homectl has
adjusted the symlink's target path to account for the fact that it lives in a
subdirectory.
================================================================================



Finding Package Contents
------------------------

Finding Available Hooks
~~~~~~~~~~~~~~~~~~~~~~~

You can find the available hooks on your system using the +hc path+ command.
For example, all the relevant +bin+ directories for this system can be found
with:

--------------------------------------------------------------------------------
$ hc path bin
/home/me/.homectl/common/bin:/home/me/.homectl/Linux/bin
--------------------------------------------------------------------------------

You can even use +hc path+ to update environment variables:

--------------------------------------------------------------------------------
$ echo $PATH
/usr/bin:/bin

$ hc path bin PATH
/home/me/.homectl/common/bin:/home/me/.homectl/Linux/bin:/usr/bin:/bin
--------------------------------------------------------------------------------

If duplicates are present, +hc path+ will helpfully remove them:

--------------------------------------------------------------------------------
$ echo $PATH
/home/me/.homectl/common/bin:/home/me/.homectl/Linux/bin:/usr/bin:/bin

$ hc path bin PATH
/home/me/.homectl/common/bin:/home/me/.homectl/Linux/bin:/usr/bin:/bin
--------------------------------------------------------------------------------

Finding Specific Files
~~~~~~~~~~~~~~~~~~~~~~

You can use +hc find+ to look for specific files inside packages.  Right now
this is very basic -- you have to search based on the path of the file within a
package.  We recommend you prefer +hc path+ over +hc find+ for now, since +hc
find+ exists primarily to ease backward compatibility with homectl 0.2 and
older.



System Directories
------------------

On the current machine, homectl looks for hooks in the following system
directories:

  * +common+
  * +$system+
    ** e.g. +Linux+, +Darwin+
  * +$system-$arch+
    ** e.g. +Linux-i686+, +Darwin-x86_64+
  * +$system-$release+
    ** e.g. +Linux-2.6.32+, +Darwin-13.3.0+
  * +$system-$release-$arch+
    ** e.g. +Linux-2.6.32-i686+, +Darwin-13.3.0-x86_64+



Well-Known Hooks
----------------

The loaders that come with homectl support the following hooks.  Any loaders you
write should follow these conventions as well.

+bin/+::
    Added to +$PATH+.  Contains scripts or binaries that belong to this package.


+emacs/+::
    Added to Emacs's +load-path+.  You can place Emacs packages here and they
    will be accessible with +(require)+.

+emacs-startup/+::
    Added to Emacs's +load-path+.  You can place Emacs packages here and they
    will be automatically loaded with +(require)+ at startup.

+lib/+::
+lib64/+::
+lib32/+::
    Added to +$LD_LIBRARY_PATH+, +$DYLD_LIBRARY_PATH+ or the equivalent on your
    platform.  Contains libraries used by binaries in this package.

+overlay/+::
    Files in +overlay+ are symlinked directly into your home
    directory.  _[+common+ system only]_



Package File Reference
----------------------

*Note: Bare files in packages are deprecated, and exist mainly to provide
backward compatibility with homectl <= 0.2.  Use them only if there is no hook
that does what you want.*

Files with certain special names may be placed directly into the root of a
homectl package, and they will be picked up by the various loaders.  Note that
these files are not system-specific; that is, they may not be placed into a
system directory and they are always used, no matter what system you're
currently on.

Used by Shell Loaders
~~~~~~~~~~~~~~~~~~~~~

For hooks, when multiple file extensions are listed, the files are sourced as
follows:

  . Files with no extension are sourced by every shell (for those rare cases
    where a script might work in both csh and sh).
  . Files with a +.sh+ extension are sourced by both the bash and zsh loaders.
  . Files with a shell-specific extension are sourced only by that shell.

In addition to the directories in the previous section, shell loaders recognize
the following hooks:

+env+::
+env.sh+::
+env.bash+::
+env.zsh+::
    Sourced by the shell to set environment variables, in both interactive and
    non-interactive environments.  By convention, these should not produce any
    output (normally), nor should they expect any input from the user.  They
    should, however, run very fast.

+shell+::
+shell.sh+::
+shell.bash+::
+shell.zsh+::
    Sourced by the shell in interactive environments, to add custom functions,
    change the shell prompt, etc.  These should still run fast, but they are
    allowed to produce output or expect input.

Used by +loader-emacs.hcpkg+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

+emacs.el+::
    +emacs.el+ files in each package are loaded directly into Emacs, in random
    order, using +(load-file)+.
